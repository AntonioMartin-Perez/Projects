# # Caso que falla
import os
os.chdir("C:\\Users\\Ender\\OneDrive\\WiP\\Artificial Intelligence EDX\\Project2 mnist\\part1")
import numpy as np
from softmax import * 

X = np.array([
[ 1., 42., 68., 15., 46., 70., 93., 19., 23., 10., 33.],
[ 1., 14., 50., 15., 77., 59., 89., 88.,  1., 42., 36.],
[ 1., 32., 96., 99., 45., 12., 45., 35., 99., 72., 17.],
[ 1., 65., 77., 69., 62., 52., 14., 46.,  7., 16., 79.],
[ 1., 63., 54., 44., 34., 64., 82.,  7., 35., 35., 84.],
[ 1., 30., 46., 21.,  9.,  1., 80., 97., 55., 56., 53.],
[ 1.,  8., 29., 35., 77., 50., 11., 45., 97., 61., 44.],
[ 1., 33., 44., 47., 37.,  6., 86., 77., 18., 77., 19.],
[ 1., 59., 84., 88., 30., 36., 21., 91., 48., 30., 90.],
[ 1., 75., 55., 14., 22., 81., 39., 71., 75., 77., 45.]]
)

Y = np.array(
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
)

theta= np.array([
[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]  
)

alpha           =   0.3
temp_parameter  =   1.0  
lambda_factor   =   0.0001

theta_1 = run_gradient_descent_iteration(X, Y, theta, alpha, lambda_factor, temp_parameter)
theta_2 = run_gradient_descent_iteration(X, Y, theta_1, alpha, lambda_factor, temp_parameter)

# X=np.array(  [
# [ 1., 94., 99., 19., 45., 13.,  2., 78., 92., 85., 63.],
# [ 1., 81., 27., 47., 95., 98., 50., 67., 20.,  6., 18.],
# [ 1., 93., 89., 81., 35., 11., 93., 78., 25., 29., 93.],
# [ 1., 40., 51., 45., 85., 99., 66.,  9., 36., 68., 28.],
# [ 1.,  7., 89., 80., 90., 83., 82., 26.,  2., 41., 23.],
# [ 1., 24., 20., 53., 53., 86., 34., 13., 11., 91., 29.],
# [ 1., 27., 33., 73., 12., 69., 68., 17., 32., 29.,  6.],
# [ 1., 23.,  5., 35., 13., 76., 41.,  8., 78.,  2., 36.],
# [ 1., 21., 58., 73., 88., 14., 93., 40., 91., 55., 83.],
# [ 1., 30.,  2., 67., 48., 60., 80., 15., 70., 44., 97.]]
# )

# Y=np.array(  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1] )


# theta=np.array(  [
# [-0.03 , -1.32,  -1.419, -1.719, -1.692, -1.827, -1.827, -1.053, -1.371, -1.35, -1.428],
# [ 0.27 , 11.88,  12.771, 15.471, 15.228, 16.443, 16.443,  9.477, 12.339, 12.15, 12.852],
# [-0.03 , -1.32,  -1.419, -1.719, -1.692, -1.827, -1.827, -1.053, -1.371, -1.35, -1.428],
# [-0.03 , -1.32,  -1.419, -1.719, -1.692, -1.827, -1.827, -1.053, -1.371, -1.35, -1.428],
# [-0.03 , -1.32,  -1.419, -1.719, -1.692, -1.827, -1.827, -1.053, -1.371, -1.35, -1.428],
# [-0.03 , -1.32,  -1.419, -1.719, -1.692, -1.827, -1.827, -1.053, -1.371, -1.35, -1.428],
# [-0.03 , -1.32,  -1.419, -1.719, -1.692, -1.827, -1.827, -1.053, -1.371, -1.35, -1.428],
# [-0.03 , -1.32,  -1.419, -1.719, -1.692, -1.827, -1.827, -1.053, -1.371, -1.35, -1.428],
# [-0.03 , -1.32,  -1.419, -1.719, -1.692, -1.827, -1.827, -1.053, -1.371, -1.35, -1.428],
# [-0.03 , -1.32,  -1.419, -1.719, -1.692, -1.827, -1.827, -1.053, -1.371, -1.35, -1.428]]
# )
# lambda_factor   =  0.0001
# temp_parameter  =  1.0


# # print( softmax.compute_cost_function (X,Y,theta,lambda_factor,temp_parameter) )
# # print(softmax.compute_probabilities(X,theta,temp_parameter))